from flask import Flask, render_template, request, session, redirect, url_for, jsonify
from flask_socketio import SocketIO, emit, join_room, leave_room
from datetime import datetime
import hashlib
import json
import os
import requests

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key_here_change_this_in_production'
socketio = SocketIO(app, cors_allowed_origins="*")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN_HERE'
TELEGRAM_CHANNEL_ID = '@YOUR_CHANNEL_USERNAME_HERE'  # –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞

# –ü—Ä–æ—Å—Ç–∞—è "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_db = {
    'admin': {
        'password': '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8',  # password
        'username': 'admin'
    }
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}
messages = []
support_tickets = []  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –æ–±—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def send_to_telegram(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': TELEGRAM_CHANNEL_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, json=payload)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
        return False

@app.route('/')
def index():
    if 'user' in session:
        return redirect(url_for('chat'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        if username in users_db and users_db[username]['password'] == hash_password(password):
            session['user'] = users_db[username]
            session['username'] = username
            return redirect(url_for('chat'))
        else:
            return render_template('login.html', error='–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        if len(username) < 3:
            return render_template('register.html', error='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤')
        if len(password) < 4:
            return render_template('register.html', error='–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 4 —Å–∏–º–≤–æ–ª–æ–≤')
        if password != confirm_password:
            return render_template('register.html', error='–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
        if username in users_db:
            return render_template('register.html', error='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        
        users_db[username] = {
            'password': hash_password(password),
            'username': username
        }
        
        session['user'] = users_db[username]
        session['username'] = username
        return redirect(url_for('chat'))
    
    return render_template('register.html')

@app.route('/chat')
def chat():
    if 'user' not in session:
        return redirect(url_for('login'))
    return render_template('chat.html', username=session['username'])

@app.route('/support', methods=['GET', 'POST'])
def support():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        issue_type = request.form['issue_type']
        title = request.form['title']
        description = request.form['description']
        priority = request.form['priority']
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ
        ticket = {
            'id': len(support_tickets) + 1,
            'username': session['username'],
            'issue_type': issue_type,
            'title': title,
            'description': description,
            'priority': priority,
            'status': 'new',
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'admin_response': None
        }
        
        support_tickets.append(ticket)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        telegram_message = f"""
üÜï <b>–ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï –í –ü–û–î–î–ï–†–ñ–ö–£</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {session['username']}
üìã <b>–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:</b> {issue_type}
üö® <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority}
üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}
‚è∞ <b>–í—Ä–µ–º—è:</b> {ticket['timestamp']}
üÜî <b>ID –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> #{ticket['id']}
        """.strip()
        
        send_to_telegram(telegram_message)
        
        return render_template('support.html', 
                             success='–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                             username=session['username'])
    
    return render_template('support.html', username=session['username'])

@app.route('/support/tickets')
def support_tickets_list():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    user_tickets = [t for t in support_tickets if t['username'] == session['username']]
    return render_template('support_tickets.html', 
                         tickets=user_tickets, 
                         username=session['username'])

@app.route('/admin/support')
def admin_support():
    if 'user' not in session or session['username'] != 'admin':
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    return render_template('admin_support.html', 
                         tickets=support_tickets,
                         username=session['username'])

@app.route('/admin/support/respond', methods=['POST'])
def admin_respond():
    if 'user' not in session or session['username'] != 'admin':
        return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    ticket_id = int(request.form['ticket_id'])
    response = request.form['response']
    
    for ticket in support_tickets:
        if ticket['id'] == ticket_id:
            ticket['status'] = 'answered'
            ticket['admin_response'] = response
            ticket['answered_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ Telegram
            telegram_message = f"""
‚úÖ <b>–û–¢–í–ï–¢ –ù–ê –û–ë–†–ê–©–ï–ù–ò–ï</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {ticket['username']}
üÜî <b>ID –æ–±—Ä–∞—â–µ–Ω–∏—è:</b> #{ticket['id']}
üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {ticket['title']}
üí¨ <b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b> {response}
‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> {ticket['answered_at']}
            """.strip()
            
            send_to_telegram(telegram_message)
            break
    
    return jsonify({'success': True})

@app.route('/logout')
def logout():
    session.pop('user', None)
    session.pop('username', None)
    return redirect(url_for('login'))

@socketio.on('connect')
def handle_connect():
    if 'username' in session:
        user_data = {
            'username': session['username'],
            'sid': request.sid,
            'join_time': datetime.now().strftime('%H:%M:%S')
        }
        active_users[request.sid] = user_data
        
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {session["username"]}')
        
        emit('user_connected', {
            'username': session['username'],
            'online_users': get_online_users(),
            'timestamp': get_current_time()
        }, broadcast=True)
        
        emit('message_history', messages)
        emit('online_users_update', get_online_users())

@socketio.on('disconnect')
def handle_disconnect():
    if request.sid in active_users:
        username = active_users[request.sid]['username']
        del active_users[request.sid]
        
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {username}')
        
        emit('user_disconnected', {
            'username': username,
            'online_users': get_online_users(),
            'timestamp': get_current_time()
        }, broadcast=True)

@socketio.on('send_message')
def handle_message(data):
    if 'username' not in session:
        return
    
    username = session['username']
    message_data = {
        'id': len(messages) + 1,
        'username': username,
        'message': data['message'],
        'timestamp': get_current_time(),
        'type': 'message'
    }
    
    messages.append(message_data)
    
    if len(messages) > 100:
        messages.pop(0)
    
    emit('new_message', message_data, broadcast=True)
    
    print(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {data["message"]}')

@socketio.on('typing')
def handle_typing(data):
    if 'username' not in session:
        return
    
    username = session['username']
    emit('user_typing', {
        'username': username,
        'is_typing': data['is_typing']
    }, broadcast=True, include_self=False)

def get_online_users():
    return [user['username'] for user in active_users.values()]

def get_current_time():
    return datetime.now().strftime('%H:%M:%S')

# –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü app.py
if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    socketio.run(app, host='0.0.0.0', port=port, debug=False)
